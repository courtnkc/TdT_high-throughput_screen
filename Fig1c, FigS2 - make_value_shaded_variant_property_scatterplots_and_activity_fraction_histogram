'''
This script was used to generate Figures 1c and S2.
The input for this script is generated by first running "HT_assay-5 - Fig1c, Fig1d, Fig2, Fig3b, FigS1, FigS2b-d, FigS3, TablesS1-S4 - analyze_variants_in_massive_pooled_assay.py"
The outputs of this script are the exact figures presented in the paper.
'''

import matplotlib.pyplot as plt
import pandas as pd

##### USER INPUTS #####

sample_name = 'all023' #021, 022, and 023 refer to library 1, library 2, and library 3, respectively. This directs the script to look for an output file from "HT_assay-5 - Fig1c, Fig1d, Fig2, Fig3b, FigS1, FigS2b-d, FigS3, TablesS1-S4 - analyze_variants_in_massive_pooled_assay.py
activity_or_ins_length = 'avg length' #do you want to plot the relationship between bias and activity fraction, or bias and avg insertion length? Plots of bias vs. avg insertion length were included in the paper. Write 'avg length' or 'A/T bias'
min_insertion_cutoff = 250 #what is the minimum number of insertions required to be plotted?
max_insertion_cutoff = 1000 #what should be the value for the most darkly colored points on the plot?
activity_cutoff = 0.7 #what is the minimum insertion fraction for plotted variants

##### END OF USER INPUTS #####

sample_file = open('aligned_all_TdT_reads_PassedFilter_Gs_{}.txt_DATAFRAME_NNKs_lengths_GROUPED.csv'.format(sample_name),'r').read().splitlines() 

single_line_data = [] #will use this to make a Pandas dataframe of the data from the input file
all_lines_data = []

line_counter = 0
for line in sample_file:

    if line_counter == 0:
        line_counter += 1
        continue

    else:
        interpretable_line = line.split(',')
        total_n_ins = int(interpretable_line[9]) #only tally results for NNKs that have >= the minimum number of insertions
        activity = float(interpretable_line[10])

        if total_n_ins >= min_insertion_cutoff and activity >= activity_cutoff:
            NNK_ID = str(interpretable_line[1])
            avg_length = float(interpretable_line[7])
            AT_bias = float(interpretable_line[11])

            single_line_data.append(NNK_ID) #populating the pandas dataframe
            single_line_data.append(avg_length)
            single_line_data.append(activity)
            single_line_data.append(AT_bias)
            
            if total_n_ins > max_insertion_cutoff: #for color-coding the points in the scatterplot, max out the color scale at max_insertion_cutoff
                total_n_ins = max_insertion_cutoff
     
            single_line_data.append(int(total_n_ins))

            all_lines_data.append(single_line_data)

    single_line_data = []

columns = ['translated NNKs', 'avg length', 'activity fraction', 'A/T bias', 'tot n ins']
complete_dataframe = pd.DataFrame(all_lines_data, columns = columns)

collapsed_dataframe = complete_dataframe.groupby(['translated NNKs'], as_index=False).agg({'avg length':'mean','activity fraction':'mean','A/T bias':'mean','tot n ins':'mean'})    
collapsed_dataframe.to_csv(sample_name + '_bias_vs_{}_SCATTER_PLOT_COMPLETE_DATAFRAME_min_ins_{}_min_activity_{}.csv'.format(activity_or_ins_length, min_insertion_cutoff, activity_cutoff))

list_of_biases = []
for value in collapsed_dataframe['A/T bias']:
    list_of_biases.append(value)
    
arialfont = {'fontname':'Arial'}
cm = plt.cm.get_cmap('gnuplot2_r')
plt.scatter(collapsed_dataframe['A/T bias'], collapsed_dataframe['{}'.format(activity_or_ins_length)], s=20, c=collapsed_dataframe['tot n ins'], cmap=cm, edgecolors = 'none', alpha = 0.5)
plt.colorbar()

plt.xlabel("A/T bias", fontsize=17, labelpad=8, **arialfont)
plt.ylabel("{}".format(activity_or_ins_length), fontsize=17, labelpad=8, **arialfont)
plt.savefig('{}_bias_vs_{}_scatterplot_min_ins_{}_min_activity_{}.pdf'.format(sample_name, activity_or_ins_length, min_insertion_cutoff, activity_cutoff)) #outputs a separate violin plot for each NNK.
plt.close()

plt.hist(collapsed_dataframe['activity fraction'], edgecolor = "black", bins = 50)
plt.savefig('{}_HISTOGRAM_ins_fractions_min_ins_{}_min_activity_{}.pdf'.format(sample_name, min_insertion_cutoff, activity_cutoff))
plt.close()